{"version":3,"sources":["components/List.js","components/Repos.js","App.js","serviceWorker.js","index.js"],"names":["List","props","repos","className","length","slice","map","repo","id","href","html_url","name","language","icon","faCircle","fork","size","color","faCheckCircle","faTimesCircle","Repos","state","fetch","response","json","console","log","this","setState","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4VA2DeA,EAlDF,SAACC,GAAW,IACfC,EAAUD,EAAVC,MACR,OAAc,OAAVA,EAAuB,wBAAIC,UAAU,WAAd,oBAEzB,6BACE,wBAAIA,UAAU,WAAd,iCAAuDD,EAAME,OAA7D,KACA,4BACE,+BACE,4BACE,oCACA,wCACA,uCAEDF,EAAMG,MAAM,GAAI,GAAGC,KAAI,SAACC,GACvB,OACE,4BACE,4BACE,uBAAGC,GAAG,YAAYC,KAAMF,EAAKG,UAAWH,EAAKI,OAE/C,wBAAIH,GAAG,iBACc,OAAlBD,EAAKK,SACJ,kBAAC,IAAD,CAAiBC,KAAMC,MAEvBP,EAAKK,UAGT,6BACiB,IAAdL,EAAKQ,KACJ,kBAAC,IAAD,CACEC,KAAK,KACLC,MAAM,UACNJ,KAAMK,MAGR,kBAAC,IAAD,CACEF,KAAK,KACLC,MAAM,UACNJ,KAAMM,eCnBbC,EAxBf,kDACE,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IACDoB,MAAQ,CACXnB,MAAO,MAHQ,EADrB,wLASmB,gEATnB,SAU2BoB,MADR,iEATnB,cAUUC,EAVV,gBAWwBA,EAASC,OAXjC,OAWUtB,EAXV,OAYIuB,QAAQC,IAAIxB,GACZyB,KAAKC,SAAS,CAAE1B,MAAOA,IAb3B,qIAgBI,OACE,6BACE,kBAAC,EAAD,CAAMA,MAAOyB,KAAKN,MAAMnB,aAlBhC,GAA2B2B,aCUZC,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCIc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.2980da7f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"styles/List.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCheckCircle,\n  faTimesCircle,\n  faCircle,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst List = (props) => {\n  const { repos } = props;\n  if (repos === null) return <h2 className=\"heading\">No repos, sorry.</h2>;\n  return (\n    <div>\n      <h2 className=\"heading\">Available public repositories({repos.length})</h2>\n      <ul>\n        <table>\n          <tr>\n            <th>Name</th>\n            <th>Language</th>\n            <th>Forked</th>\n          </tr>\n          {repos.slice(0, -1).map((repo) => {\n            return (\n              <tr>\n                <td>\n                  <a id=\"repo-name\" href={repo.html_url}>{repo.name}</a>\n                </td>\n                <td id=\"language-name\">\n                  {repo.language === null ? (\n                    <FontAwesomeIcon icon={faCircle} />\n                  ) : (\n                    repo.language\n                  )}\n                </td>\n                <td>\n                  {repo.fork === true ? (\n                    <FontAwesomeIcon\n                      size=\"lg\"\n                      color=\"#0CCE23\"\n                      icon={faCheckCircle}\n                    />\n                  ) : (\n                    <FontAwesomeIcon\n                      size=\"lg\"\n                      color=\"#D30404\"\n                      icon={faTimesCircle}\n                    />\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </table>\n      </ul>\n    </div>\n  );\n};\n\nexport default List;\n","import React, { Component } from \"react\";\nimport List from \"./List\";\n\nexport class Repos extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      repos: null,\n    };\n  }\n\n  async componentDidMount() {\n    const apiUrl = \"https://api.github.com/users/aniruddha2000/repos?per_page=100\";\n    const response = await fetch(apiUrl);\n    const repos = await response.json();\n    console.log(repos);\n    this.setState({ repos: repos });\n  }\n  render() {\n    return (\n      <div>\n        <List repos={this.state.repos} />\n      </div>\n    );\n  }\n}\n\nexport default Repos;\n","import React from \"react\";\nimport \"./App.scss\";\nimport Repos from \"components/Repos\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Repos />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}